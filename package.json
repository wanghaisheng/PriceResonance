{
  "name": "priceresonance",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "convert-images": "node --input-type=module -e \"import fs from 'fs'; const script = `import fs from 'fs'; import path from 'path'; import { fileURLToPath } from 'url'; import sharp from 'sharp'; const __filename = fileURLToPath(import.meta.url); const __dirname = path.dirname(__filename); let successCount = 0; let errorCount = 0; let skippedCount = 0; async function convertToAvif(inputPath, outputPath) { try { if (fs.existsSync(outputPath)) { const inputStat = fs.statSync(inputPath); const outputStat = fs.statSync(outputPath); if (outputStat.mtime > inputStat.mtime) { console.log(\\`Skipping: \\${inputPath} (already up to date)\\`); skippedCount++; return; } } await sharp(inputPath).avif({ quality: 50 }).toFile(outputPath); console.log(\\`Converted: \\${inputPath} -> \\${outputPath}\\`); successCount++; } catch (error) { console.error(\\`Error converting \\${inputPath}:\\`, error); errorCount++; } } async function processDirectory(inputDir, outputDir) { if (!fs.existsSync(outputDir)) { fs.mkdirSync(outputDir, { recursive: true }); } const files = fs.readdirSync(inputDir); for (const file of files) { const inputPath = path.join(inputDir, file); const stat = fs.statSync(inputPath); if (stat.isDirectory()) { await processDirectory(inputPath, path.join(outputDir, file)); } else if (stat.isFile() && /\\\\.(jpg|jpeg|png|webp)$/i.test(file)) { const outputPath = path.join(outputDir, \\`\\${path.parse(file).name}.avif\\`); await convertToAvif(inputPath, outputPath); } } } async function main() { const startTime = Date.now(); const projectRoot = process.cwd(); await processDirectory(path.join(projectRoot, 'src', 'data_files', 'images'), path.join(projectRoot, 'src', 'images')); await processDirectory(path.join(projectRoot, 'src', 'data_files', 'images', 'blogs'), path.join(projectRoot, 'src', 'images', 'blogs')); const endTime = Date.now(); const duration = (endTime - startTime) / 1000; console.log('Conversion complete!'); console.log(\\`Successfully converted: \\${successCount} images\\`); console.log(\\`Skipped (already up to date): \\${skippedCount} images\\`); console.log(\\`Failed conversions: \\${errorCount} images\\`); console.log(\\`Total time: \\${duration.toFixed(2)} seconds\\`); } main().catch(error => { console.error('An error occurred during the conversion process:', error); process.exit(1); });`; fs.writeFileSync('temp-convert-script.mjs', script); process.exit(0);\" && node temp-convert-script.mjs && rm temp-convert-script.mjs",
    "prebuild": "npm run convert-images",
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro check && astro build && node process-html.mjs",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "@astrojs/check": "^0.9.3",
    "@astrojs/sitemap": "^3.1.6",
    "@astrojs/starlight": "^0.25.4",
    "@astrojs/starlight-tailwind": "^2.0.3",
    "@astrojs/tailwind": "^5.1.0",
    "@astrojs/vercel": "^7.7.2",
    "@preline/accordion": "^2.4.1",
    "@preline/collapse": "^2.4.1",
    "@preline/dropdown": "^2.4.1",
    "@preline/overlay": "^2.4.1",
    "@preline/tabs": "^2.4.1",
    "@vercel/nft": "^0.27.3",
    "astro": "^4.14.2",
    "astro-compressor": "^0.4.1",
    "clipboard": "^2.0.11",
    "globby": "^14.0.2",
    "gsap": "^3.12.5",
    "html-minifier-terser": "^7.2.0",
    "lenis": "^1.1.9",
    "preline": "^2.4.1",
    "rimraf": "^6.0.1",
    "sharp": "^0.33.5",
    "sharp-ico": "^0.1.5",
    "tailwindcss": "^3.4.10"
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.5.7",
    "astro-vtbot": "^1.8.6",
    "prettier": "^3.3.3",
    "prettier-plugin-astro": "^0.14.1",
    "prettier-plugin-tailwindcss": "^0.6.6",
    "typescript": "^5.5.4"
  }
}
